[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools",
  "setuptools-scm",
]

[project]
name = "rdmo"
description = "RDMO is a tool to support the systematic planning, organisation and implementation of the data management throughout the course of a research project."
readme = "README.md"
keywords = [
  "data management plan",
  "dmp",
  "rdmo",
  "research data",
  "research data management",
]
license = {text = "Apache-2.0"}
authors = [
    {name = "RDMO Arbeitsgemeinschaft", email = "rdmo-team@listserv.dfn.de"},
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Framework :: Django :: 3.2",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dynamic = [
  "version",
]
dependencies = [
  "defusedcsv~=2.0.0",
  "defusedxml~=0.7.1",
  "Django~=3.2.20",
  "django-allauth~=0.51.0",
  "django-cleanup~=6.0.0",
  "django-compressor~=4.4",
  "django-extensions~=3.2.0",
  "django-filter~=21.1",
  "django-libsass==0.9",
  "django-mathfilters~=1.0.0",
  "django-mptt~=0.13.4",
  "django-rest-swagger~=2.2.0",
  "django-settings-export~=1.2.1",
  "django-widget-tweaks~=1.4.8",
  "djangorestframework~=3.12.4",
  "drf-extensions~=0.7.0",
  "iso8601~=2.0.0",
  "jsonfield~=3.1.0",
  "Markdown~=3.3.7",
  "pypandoc~=1.10.0",
  "rules~=3.3.0",
]
[project.optional-dependencies]
ci = [
  "coveralls",
  "rdmo[dev]",
]
dev = [
  "django-debug-toolbar",
  "pre-commit",
  "rdmo[tests]",
]
docs = [
  "recommonmark",
  "sphinx",
  "sphinx-autobuild",
  "sphinx_rtd_theme",
]
gunicorn = [
  "gunicorn>=19.9",
]
ldap = [
  "django-auth-ldap>=2",
]
memcached = [
  "python-memcached>=1.58",
]
mysql = [
  "mysqlclient~=2.2.0",
]
postgres = [
  "psycopg2-binary~=2.9.6",
]
shibboleth = [
  "django-shibboleth-remoteuser@ git+https://github.com/Brown-University-Library/django-shibboleth-remoteuser.git@main",
]
tests = [
  "pytest~=7.4.0",
  "pytest-cov~=4.0.0",
  "pytest-django~=4.5.0",
  "pytest-dotenv~=0.5.2",
  "pytest-mock~=3.11.0",
  "pytest-randomly~=3.15.0",
  "pytest-xdist~=3.3.1",
]
[project.urls]
Changelog = "https://github.com/rdmorganiser/rdmo/blob/master/CHANGELOG.md"
Documentation = "https://rdmo.readthedocs.io"
Homepage = "https://rdmorganiser.github.io/"
Issues = "https://github.com/rdmorganiser/rdmo/issues"
Repository = "https://github.com/rdmorganiser/rdmo.git"

[tool.setuptools]
packages = ["rdmo"]

[tool.setuptools.dynamic]
version = {attr = "rdmo.__version__"}

[tool.black]
line-length = 120
skip-string-normalization = true
target_version = ["py38", "py39", "py310", "py311"]

[tool.ruff]
target-version = "py38"
line-length = 120
select = [
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "E",    # pycodestyle
  "F",    # pyflakes
  "I",    # isort
  "PGH",  # pygrep-hooks
  "RUF",  # ruff
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
  "B006",   # mutable-argument-default
  "B007",   # unused-loop-control-variable
  "RUF012", # mutable-class-default
]

[tool.ruff.isort]
known-first-party = ["rdmo"]
section-order = ["future", "standard-library", "django", "third-party", "first-party", "local-folder"]

[tool.ruff.isort.sections]
django = ["django"]

[tool.ruff.per-file-ignores]
# Ignore certain rules for tests, e.g. usage of assert is allowed
"rdmo/**/tests/test_*.py" = [
  "S101", # assert
  "S106", # hardcoded-password-func-arg
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings"
testpaths = ["rdmo"]
python_files = "test_*.py"
pythonpath = [".", "testing"]

[tool.coverage.run]
source = ["rdmo"]
parallel = true

[tool.coverage.report]
omit = [
    "*/management/*",
    "*/migrations/*",
    "*/tests/*",
]
exclude_lines = [
    "raise Exception",
    "except ImportError:"
]
